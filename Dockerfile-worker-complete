# AnalyLit V4.0 - Dockerfile pour les workers (VERSION FINALE STABLE ET RAPIDE)

# Utilise une image de base CUDA avec Ubuntu 22.04
FROM nvidia/cuda:12.3.1-runtime-ubuntu22.04 AS final_worker

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Paris
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

WORKDIR /app

# --- Installation des dépendances système et Python ---
# Installe Python 3.11 et les outils nécessaires, y compris pip et les libs graphiques
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    tzdata \
    && add-apt-repository ppa:deadsnakes/ppa -y \
    && apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip \
    gcc \
    g++ \
    curl \
    build-essential \
    git \
    libgl1-mesa-glx \
    libglib2.0-0 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && rm -rf /var/lib/apt/lists/*

# Met à jour pip, setuptools, wheel pour éviter les problèmes de version
# Cette étape est cruciale pour que 'python -m pip' fonctionne de manière fiable
RUN python -m pip install --upgrade pip setuptools wheel

# Copie requirements.txt et installe les dépendances Python
# Utilise --no-cache-dir pour s'assurer que les paquets sont toujours téléchargés
# Utilise --ignore-installed --no-deps pour blinker afin de gérer le conflit avec les paquets système
COPY requirements.txt .
RUN python -m pip install --no-cache-dir --ignore-installed -r requirements.txt && \
    python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')"
	
# --- Copie du reste de l'application ---
# Ces fichiers peuvent changer fréquemment, donc ils sont copiés à la fin
COPY config_v4.py .
COPY tasks_v4_complete.py .

# --- Configuration finale ---
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV CUDA_VISIBLE_DEVICES=0
ENV USE_GPU=true

RUN mkdir -p /app/projects /app/model_cache
ENV SENTENCE_TRANSFORMERS_HOME=/app/model_cache

# La commande de démarrage est dans docker-compose-local.yml
